type Query {
    roundList(userId: String): [RoundResponse]
    userList: [UserResponse]
}

type Mutation {
    createUser(user: UserRequest): UserResponse
    updateUser(id: String, user: UserRequest): UserResponse
    createRound(round: RoundRequest): RoundResponse
}

input RoundRequest {
    userId: String
    bow: BowRequest
    roundType: String
    location: String
    notes: String
    roundDate: String
    score: Int
}

input UserRequest {
    firstName: String
    lastName: String
    email: String
    password: String
    bows: [BowRequest]
}

type UserResponse {
    id: String
    firstName: String
    lastName: String
    email: String
    bows: [BowResponse]
}

type BowResponse {
    id: String
    name: String
    bowType: String
    manufacturer: String
    model: String
    drawWeight: Float
    ataLength: Float
    braceHeight: Float
}

input BowRequest {
    name: String
    bowType: String
    manufacturer: String
    model: String
    drawWeight: Float
    ataLength: Float
    braceHeight: Float
}

type RoundResponse {
    id: String
    userId: String
    bow: BowResponse
    roundType: String
    location: String
    notes: String
    roundDate: String
    score: Int
}